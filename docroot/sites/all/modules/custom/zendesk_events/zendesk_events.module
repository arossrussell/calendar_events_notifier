<?php
// Require Zendesk API Client
require_once DRUPAL_ROOT . '/sites/all/modules/custom/zendesk_events/zendesk_api_client/vendor/autoload.php';
use Zendesk\API\HttpClient as ZendeskAPI;

// Initalizes the ZD Client
function zendesk_client_init() {
    // This sets the Zendesk User, Zendesk Instance/subdomain, & ZD API key set as drush variables
    $subdomain = variable_get('zendesk_events_zd_api_subdomain', FALSE);
    $username = variable_get('zendesk_events_zd_api_user', FALSE);
    $token = variable_get('zendesk_events_zd_api_token', FALSE);
    if (!$subdomain || !$username || !$token) {
      throw new \Exception("Fatal: This script requires you to configure a Zendesk API endpoint and user. Please do this by setting the 'zendesk_events_zd_api_subdomain', 'zendesk_events_zd_api_user', and 'zendesk_events_zd_api_token' variables.");
    }
    else {
      $client = new ZendeskAPI($subdomain);
      $client->setAuth('basic', ['username' => $username, 'token' => $token]);
      return $client;
    }
}

//Take the TICKET IDs from Google Calendar and grab their ORG IDs from Zendesk.
function orgs_from_gcal() {
    try {
        $client = zendesk_client_init();
        //Grab the current calendar_events.module generated TICKET IDs from cache.
        $data = cache_get('cached_gcal_data');
        $seed_tickets = array_values($data->data);
        $orgs_from_gcal = array();
        // Get Org IDs from tickets in the view
        foreach($seed_tickets as $ticket) {
            $x = $client->tickets()->find($ticket);
            $y = $x->ticket->organization_id;
            $z = array_push($orgs_from_gcal, $y);
        }
    }
    catch (\Zendesk\API\Exceptions\ApiResponseException $e) {
        echo $e->getMessage().'</br>';
    }
    return $orgs_from_gcal;
}

//Determine whether to add internal comments, or to just expire what's currently in the view.
function addComment() {
    $client = zendesk_client_init();
    $gcal_orgs = orgs_from_gcal();
    // Return all tickets from our custom Zendesk view.
    $tickets_from_zd_view = $client->views(360078256934)->tickets();
    //Grab the TICKET IDs for each ticket, put them in an array, then print the result.
    $zd_ticket_ids = array_column($tickets_from_zd_view->tickets, 'id');
    //Grab the ORG IDs for each ticket, put them in an array, then print the result.
    $zd_ticket_orgs = array_column($tickets_from_zd_view->tickets, 'organization_id');
    //Find ORG ID matches between Google Calendar and the Zendesk view.
    $matching_org_ids = array_intersect($zd_ticket_orgs, $gcal_orgs);
    if (empty($matching_org_ids) == false) {
        // For tickets that have matches, Send an update & tag the ticket as event:yes
        foreach($tickets_from_zd_view->tickets as $ticket) {
            $array = array();
            $x = $ticket->id;
            $y = $ticket->organization_id;
            $z = array_push($array, $x);
            if(in_array($y, $gcal_orgs)) {
                $client->tickets()->updateMany( [
                        'ids'    => $array,
                        'comment'  => [
                                    'body' => "Hi Supporta! This customer may be having a High Traffic event right now. Please check the `Customers` calendar for more information.",
                                    'public' => false,
                                ],
                        'additional_tags' => ['event:yes'],
                    ]);
            }
            else {
                // Adding Tag for tickets that have new ZD tickets but no match -- set event:no tag
                $client->tickets()->updateMany( [
                    'ids'    => $zd_ticket_ids,
                    'additional_tags' => ['event:no'],
                ]);
            }
        }
    }
    else {
      // No match, set event:no tag
        try {
            $client->tickets()->updateMany( [
            'ids' => $zd_ticket_ids,
            'additional_tags' => ['event:no'],
         ]);
      }
      catch (\Zendesk\API\Exceptions\ApiResponseException $e) {
        echo $e->getMessage().'</br>';
     }
  }
    return $matching_org_ids;
}

//This is where the master function should live in the `.module` file. When you call  `drush zd-command`  the PHP code will run in this function.
function drush_zendesk_events_zd_command()
{
    //Instantiate the ZD client
    zendesk_client_init();
    //Take the TICKET IDs from Google Calendar and grab their ORG IDs from Zendesk.
    orgs_from_gcal();
    // Put in here the master function you want drush to run.
    addComment();
}
